// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        String   @default("user") // user, admin, moderator, seller
  status      String   @default("active") // active, pending_verification, suspended
  sellerRequests SellerRequest[]
  ads         Ad[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SellerRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  status      String   @default("pending") // pending, approved, rejected
  reason      String?
  reviewedBy  Int?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  ads       Ad[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ad {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  price             Float
  phone             String?
  address           String?
  images            String @db.Text    // JSON array of image URLs
  status            String    @default("pending_verification") // pending_verification, active, expired, rejected
  verificationStatus String    @default("in_review") // in_review, verified, rejected
  verificationReason String?
  publishedAt       DateTime?
  expiresAt         DateTime?
  categoryId        Int
  userId            Int
  category          Category  @relation(fields: [categoryId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}